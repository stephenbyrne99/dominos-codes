{"version":3,"sources":["logo.png","components/footer.tsx","fire.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Img","styled","img","Footer","className","href","target","rel","alt","src","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","H1","h1","Code","h2","App","useState","code","setCode","database","Date","ref","child","useEffect","on","snap","val","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,kC,gQCY3C,IAAMC,EAAMC,IAAOC,IAAV,KAiBMC,EAZU,WACvB,OACE,yBAAKC,UAAU,UACT,2CAAgB,uBAAGC,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAAnF,iBAAhB,OACA,yBAAKH,UAAU,OACb,uBAAGC,KAAK,4CAA4CC,OAAO,SAASC,IAAI,uBAAsB,kBAACP,EAAD,CAAKQ,IAAM,YAAYC,IAAI,uMACzH,uBAAGJ,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAAsB,kBAACP,EAAD,CAAKQ,IAAM,WAAWC,IAAI,oL,QCXhIC,E,OADJC,EAASC,cAVP,CACTC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,0LCQnB,IAAMC,EAAKpB,IAAOqB,GAAV,KAIFC,EAAOtB,IAAOuB,GAAV,KA8BKC,EA1BO,WAAO,IAAD,EAEFC,mBAAS,OAFP,mBAEnBC,EAFmB,KAEbC,EAFa,KAKpBC,GADO,IAAIC,KACApB,EAAKmB,WAAWE,MAAMC,MAAM,WAQ7C,OANAC,qBAAU,WACRJ,EAASK,GAAG,SAAQ,SAAAC,GAClBP,EAAQO,EAAKC,aAKf,yBAAKhC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACiB,EAAD,4BACA,yBAAKZ,IAAK4B,IAAMjC,UAAU,WAAWI,IAAI,SACzC,4CACA,kBAACe,EAAD,KAAOI,GACP,kBAAC,EAAD,SCjCYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b6723b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dfc9f6b7.png\";","import React from 'react';\n\n\n//libraries\nimport styled from 'styled-components';\n\n\n//images\n\n//styles\nimport '.././App.css';\n\nconst Img = styled.img`\n  height:50px;\n`;\n\n\nconst Footer: React.FC = () => {\n  return (\n    <div className=\"Footer\">\n          <p>Yours truly -<a href=\"https://www.linkedin.com/in/stephen-byrne-429267167/\" target=\"_blank\" rel=\"noopener noreferrer\">Stephen Byrne</a> xx</p>\n          <div className=\"row\">\n            <a href=\"https://www.instagram.com/stephenbyrne99/\" target=\"_blank\" rel=\"noopener noreferrer\"><Img alt = \"instagram\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2Fe%2Fe7%2FInstagram_logo_2016.svg%2F1200px-Instagram_logo_2016.svg.png&f=1&nofb=1\"/></a>\n            <a href=\"https://www.linkedin.com/in/stephen-byrne-429267167/\" target=\"_blank\" rel=\"noopener noreferrer\"><Img alt = \"linkedin\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2Fc%2Fc9%2FLinkedin.svg%2F1200px-Linkedin.svg.png&f=1&nofb=1\"/></a>\n          </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import firebase from 'firebase'\nvar config = { \n    apiKey: \"AIzaSyDYDaii4908iJEhtmx3hD_eWxm9MxPximw\",\n    authDomain: \"dominos-codes.firebaseapp.com\",\n    databaseURL: \"https://dominos-codes.firebaseio.com\",\n    projectId: \"dominos-codes\",\n    storageBucket: \"dominos-codes.appspot.com\",\n    messagingSenderId: \"378044140901\",\n    appId: \"1:378044140901:web:7e7819b41bba8d65f6e58c\",\n    measurementId: \"G-RZ914NLRG5\"\n};\nvar fire = firebase.initializeApp(config);\nexport default fire;","import React, {useEffect, useState} from 'react';\n\n//components\nimport Footer from './components/footer';\n\nimport fire from './fire';\n\n//libraries\nimport styled from 'styled-components';\n\n\n//images\nimport logo from './logo.png';\n\n//styles\nimport './App.css';\n\nconst H1 = styled.h1`\n  \n`;\n\nconst Code = styled.h2`\n  font-style: italic;\n`;\n\nconst App: React.FC = () => {\n\n  const [code, setCode] = useState('N/A');\n\n  const date = new Date();;\n  const database = fire.database().ref().child('Latest');\n\n  useEffect(()=> {\n    database.on('value',snap=>{\n      setCode(snap.val())\n    })\n  })\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <H1>Dominos Code Dublin</H1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Latest code: </p>\n        <Code>{code}</Code>\n        <Footer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}